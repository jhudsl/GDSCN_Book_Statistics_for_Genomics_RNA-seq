[["index.html", "Statistics for Genomics: RNAseq About this Book Skills Level GDSCN Collection", " Statistics for Genomics: RNAseq February 03, 2025 About this Book This book is intended to introduce concepts in RNA-seq analysis. Skills Level Genetics Programming skills GDSCN Collection This exercise is part of a collection of teaching resources developed through the Genomic Data Science Community Network (GDSCN). GDSCN works towards a vision where researchers, educators, and students from diverse backgrounds are able to fully participate in genomic data science research. Learn more about GDSCN by visiting https://www.gdscn.org/home or reading the article in Genome Research. Please check out our full collection of AnVIL and related resources: https://hutchdatascience.org/AnVIL_Collection/ "],["overview-and-learning-objectives.html", "Chapter 1 Overview and Learning Objectives 1.1 Activity Context 1.2 Learning Objectives", " Chapter 1 Overview and Learning Objectives 1.1 Activity Context Course Audience Graduate Students in Biological Sciences or related fields Course Prerequisites Layman understanding of genetics (understanding of DNA, genes, trait inheritance) Some previous exposure to the central dogma of molecular biology Class Type Lab Computer-based Class Size 1-50 Lesson Duration Assessment Type 1.2 Learning Objectives Learning objectives for this activity come from the Genetics Core Competencies: "],["lesson-plan.html", "Chapter 2 Lesson Plan", " Chapter 2 Lesson Plan Coming soon! "],["getting-started.html", "Chapter 3 Getting Started 3.1 Introduction 3.2 Step 1: Create a Google Account 3.3 Step 2: Sign in to Terra 3.4 Step 3: Share your ID", " Chapter 3 Getting Started 3.1 Introduction This chapter explains how to get set up to do your analyses on AnVIL. All activities will be run using RStudio, so if you choose, you can use a different RStudio interface (such as RStudio Cloud or locally installed RStudio). The Analysis, Visualization, and Informatics Lab-space (AnVIL) is a scalable and interoperable computing resource for the genomics scientific community. AnVIL enables researchers to analyze high-value open and controlled access genomic datasets with popular analysis tools in a secure cloud computing environment. AnVIL also serves as a data commons. It runs on the Google Cloud Platform (GCP) and is sponsored by NHGRI. In addition to Docker-based analysis workflows, AnVIL supports popular interactive analysis tools such as Jupyter notebooks, Bioconductor, RStudio, and Galaxy. By operating in the cloud, AnVIL users can scale analyses from a single computer to thousands and securely share data, workflows, and reproducible results with collaborators and colleagues. 3.2 Step 1: Create a Google Account AnVIL uses Terra to run analyses. Terra operates on Google Cloud Platform, so you’ll need a Google account to make sure your instructor can keep track of any computing costs you accrue. If you do not already have a Google account that you would like to use for accessing Terra, create one now. Otherwise, please use a Gmail account you have already set up. If you would like to create a Google account that is associated with your non-Gmail, institutional email address, follow these instructions. 3.3 Step 2: Sign in to Terra You need to sign into Terra with your Google account to allow your instructor to add you to projects and/or Workspaces associated with your specific class. This is the only way you can launch applications and perform computations on AnVIL. Launch Terra, and you should be prompted to sign in with your Google account. You can always access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. 3.4 Step 3: Share your ID It is very important that you share the Google account you used above with your instructor! Otherwise, they cannot add you to class projects or Workspaces. "],["data-exploration.html", "Chapter 4 Data Exploration 4.1 About the Data 4.2 Using GEOquery 4.3 GEOquery Record Types 4.4 Kabuki Dataset Metadata 4.5 Pull in counts 4.6 Explore in iSEE", " Chapter 4 Data Exploration 4.1 About the Data Mendelian disorders of the epigenetic machinery (MDEMs) are a relatively new group of multiple congenital anomaly and intellectual disability syndromes. These disorders result from mutations in genes responsible for epigenetic machinery. In other words, genes responsible for controlling the epigenome lose their normal function. Despite having different causative genes, these disorders share similarities in disease presentation. This physical similarity, or phenotypic convergence, could be due to these mutations causing similar effects at the epigenomic level. Such epigenetic changes then lead to similarities gene expression. Scientists at Johns Hopkins designed an experiment to identify abnormalities shared across multiple MDEMs, in order to causally relate epigenetic variation to disease phenotypes. As part of this experiment, scientists examined gene expression (RNA-Seq) states from mouse models of three MDEMs (Kabuki types 1&amp;2 and Rubinstein-Taybi syndromes). You can find out more about this experiment here. 4.2 Using GEOquery The NCBI Gene Expression Omnibus (GEO) is an international public repository that archives and freely distributes microarray, next-generation sequencing, and other forms of high-throughput functional genomics data submitted by the research community. We will use the Bioconductor package GEOquery to load data from GEO. Using GEOquery is convenient because it allows us to get the data programmatically without having to download anything manually. This ensures anyone following in our footsteps can follow what we did exactly. First, install GEOquery and load the library using the following code. if you are asked to update packages, you can type ‘n’ for ‘no’. # Install and load GEOquery BiocManager::install(&quot;GEOquery&quot;) library(GEOquery) 4.3 GEOquery Record Types GEO contains several different record types. The most straightforward is a ‘Sample’ record. A Sample record describes the conditions under which an individual Sample was handled, the manipulations it underwent, and the abundance measurement of each element derived from it. Each Sample record is assigned a unique and stable GEO accession number (GSMxxx). A Sample entity may be included in multiple ‘Series’. a ‘Series’ record defines a set of related Samples considered to be part of a group. This record describes how the Samples are related and provides information about the experiment. Series records may also contain tables describing extracted data, summary conclusions, or analyses. Each Series record is assigned a unique and stable GEO accession number (GSExxx). We need to locate the correct ‘Series’ number for this experiment. 4.4 Kabuki Dataset Metadata We will use the getGEO() function to locate the experiment’s data using the Series record number. # Indicate which Series to download gse &lt;- getGEO(&quot;GSE162176&quot;) The output from getGEO() on a Series record type is a list of objects called an ExpressionSet. In our case, there is only one ExpressionSet, so we can select the first item (the data) from the list using brackets. # Select the first item in the list exp_set &lt;- gse[[1]] We can look at the ExpressionSet metadata using pData(). # Extract phenotypic data pheno_data &lt;- pData(exp_set) names(pheno_data) ## [1] &quot;title&quot; &quot;geo_accession&quot; ## [3] &quot;status&quot; &quot;submission_date&quot; ## [5] &quot;last_update_date&quot; &quot;type&quot; ## [7] &quot;channel_count&quot; &quot;source_name_ch1&quot; ## [9] &quot;organism_ch1&quot; &quot;characteristics_ch1&quot; ## [11] &quot;characteristics_ch1.1&quot; &quot;characteristics_ch1.2&quot; ## [13] &quot;characteristics_ch1.3&quot; &quot;molecule_ch1&quot; ## [15] &quot;extract_protocol_ch1&quot; &quot;extract_protocol_ch1.1&quot; ## [17] &quot;taxid_ch1&quot; &quot;description&quot; ## [19] &quot;data_processing&quot; &quot;data_processing.1&quot; ## [21] &quot;data_processing.2&quot; &quot;platform_id&quot; ## [23] &quot;contact_name&quot; &quot;contact_email&quot; ## [25] &quot;contact_laboratory&quot; &quot;contact_department&quot; ## [27] &quot;contact_institute&quot; &quot;contact_address&quot; ## [29] &quot;contact_city&quot; &quot;contact_state&quot; ## [31] &quot;contact_zip/postal_code&quot; &quot;contact_country&quot; ## [33] &quot;data_row_count&quot; &quot;instrument_model&quot; ## [35] &quot;library_selection&quot; &quot;library_source&quot; ## [37] &quot;library_strategy&quot; &quot;relation&quot; ## [39] &quot;relation.1&quot; &quot;supplementary_file_1&quot; ## [41] &quot;age (approximate):ch1&quot; &quot;cell type:ch1&quot; ## [43] &quot;disease state:ch1&quot; &quot;strain:ch1&quot; View the data to see which Samples are contained in this ExpressionSet. # Explore the metadata View(pheno_data) ## title geo_accession status ## GSM4944267 Kabuki syndrome type 1 rep 1 GSM4944267 Public on Aug 31 2021 ## GSM4944268 Kabuki syndrome type 1 rep 2 GSM4944268 Public on Aug 31 2021 ## GSM4944269 Kabuki syndrome type 1 rep 3 GSM4944269 Public on Aug 31 2021 ## GSM4944270 Kabuki syndrome type 1 rep 4 GSM4944270 Public on Aug 31 2021 ## GSM4944271 Kabuki syndrome type 1 rep 5 GSM4944271 Public on Aug 31 2021 ## submission_date last_update_date type ## GSM4944267 Nov 25 2020 Aug 31 2021 SRA ## GSM4944268 Nov 25 2020 Aug 31 2021 SRA ## GSM4944269 Nov 25 2020 Aug 31 2021 SRA ## GSM4944270 Nov 25 2020 Aug 31 2021 SRA ## GSM4944271 Nov 25 2020 Aug 31 2021 SRA The GEO record provides information about each of the samples (aka “metadata”). You can use the table() function to tabulate how many samples there are for each of the three disease states (along with their corresponding wild type controls). table( pheno_data$`disease state:ch1` ) ## ## Kabuki syndrome type 1 Kabuki syndrome type 2 ## 5 5 ## Rubinstein-Taybi syndrome type 1 Wild-type (Kabuki cohorts) ## 5 5 ## Wild-type (Rubinstein-Taybi cohort) ## 7 QUESTIONS: What was the cell type (cell type:ch1) used in this experiment? Which column contains information about the ages? Which age has the most samples? 4.5 Pull in counts Retrieving GSE162176 using getGEO() currently does not obtain RNA-seq expression data. We have cached a SummarizedExperiment object in the GDSCN datasets Workspace. This object contains metadata, counts, and abundance information as produced by the nf-co.re/rnaseq/3.6 pipeline using the GENCODE M23 annotation. The Bioconductor AnVIL package provides a gsutil_cp() function to streamline transfers between AnVIL Workspaces. Note that the syntax for accessing Google Cloud Storage resources is gs://BUCKET_NAME/OBJET_NAME, and that each AnVIL Workspace has an associated bucket. The following command transfers the GSE162176.rds file from the GDSCN datasets Workspace into your Workspace. AnVIL::gsutil_cp( &quot;gs://fc-8529d29f-ac62-4c10-9f01-14f4d7612ae0/GSE162176.rds&quot;, &quot;.&quot; ) Once you have obtained a copy of the .rds file, load it into your environment using the readRDS() function. Note that you will need to install the SummarizedExperiment package if you have not previously done so. AnVIL::install( &quot;SummarizedExperiment&quot; ) se &lt;- readRDS( &quot;GSE162176.rds&quot; ) Confirm that you have successfully loaded the data by creating a scatterplot comparing a Kabuki sample and a Wild-type sample. kabuki &lt;- assay(se)[,&quot;SRX9584943&quot;] wildtype &lt;- assay(se)[,&quot;SRX9584958&quot;] plot( log2(kabuki+1), log2(wildtype+1) ) QUESTIONS: Which SRX accession numbers correspond to Rubinstein-Taybi? Create a scatterplot comparing a Rubinstein-Taybi sample and a Wild-type sample 4.6 Explore in iSEE The Bioconductor Interactive SummarizedExperiment Explorer (iSEE) provides an interactive Shiny-based graphical user interface for exploring data stored in SummarizedExperiment objects and it’s extensions such as SingleCellExperiment. One feature that we will use here is the ability to explore what experimental conditions are present in this dataset and how gene expression changes between conditions. You can launch an interactive explorer simply by calling the iSEE() function with only a SummarizedExperiment object. However, you can also configure the explorer by passing additional parameters such as the types of panels that you wish to appear. Here we launch iSEE with panels allowing exploration of the sample metadata as a table, the sample metadata as a plot, and the gene expression data as a plot. Note that you will need to install the iSEE package if you have not previously done so. AnVIL::install( &quot;iSEE&quot; ) library( &quot;iSEE&quot; ) iSEE( se, list( ColumnDataTable(), ColumnDataPlot(), FeatureAssayPlot() ) ) QUESTIONS: In the “Column data plot” panel, create a plot with age on the y-axis and disease on the x-axis. Which disease states have the most age diversity? The least? In the “Feature assay plot” panel, create a plot with ENSMUSG00000000001.4 on the y-axis and disease on the x-axis. What conclusions can you make if you plot counts? Does it change if you plot abundance? sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] GEOquery_2.62.2 Biobase_2.54.0 BiocGenerics_0.40.0 ## ## loaded via a namespace (and not attached): ## [1] bslib_0.3.1 compiler_4.1.3 pillar_1.7.0 ## [4] BiocManager_1.30.16 jquerylib_0.1.4 highr_0.9 ## [7] R.methodsS3_1.8.1 R.utils_2.12.2 tools_4.1.3 ## [10] digest_0.6.29 jsonlite_1.8.0 evaluate_0.15 ## [13] lifecycle_1.0.1 tibble_3.1.6 pkgconfig_2.0.3 ## [16] png_0.1-7 rlang_1.0.2 DBI_1.1.2 ## [19] cli_3.2.0 curl_4.3.2 yaml_2.3.5 ## [22] xfun_0.26 fastmap_1.1.0 xml2_1.3.3 ## [25] dplyr_1.0.8 stringr_1.4.0 httr_1.4.2 ## [28] knitr_1.33 generics_0.1.2 fs_1.5.2 ## [31] vctrs_0.4.1 sass_0.4.1 hms_1.1.1 ## [34] tidyselect_1.1.2 data.table_1.14.2 glue_1.6.2 ## [37] R6_2.5.1 fansi_1.0.3 ottrpal_1.0.1 ## [40] rmarkdown_2.10 bookdown_0.24 limma_3.50.3 ## [43] tidyr_1.2.0 purrr_0.3.4 readr_2.1.2 ## [46] tzdb_0.3.0 magrittr_2.0.3 ellipsis_0.3.2 ## [49] htmltools_0.5.2 assertthat_0.2.1 utf8_1.2.2 ## [52] stringi_1.7.6 crayon_1.5.1 R.oo_1.24.0 "],["help.html", "A Help", " A Help We welcome any and all questions at our Discourse Channel. If you have feedback on the activity (Found a typo? Have a suggestion or idea?) please submit an issue on our GitHub repository. You will need to make a GitHub account if you haven’t done so yet. "],["give-us-feedback.html", "B Give Us Feedback", " B Give Us Feedback Thank you for your interest in this book! There are a few ways you can suggest improvements: Fill out this Google form. If you have a GitHub account, you can raise an issue in our repository. Submit a pull request! Click the pencil icon on any page (top left) to view the source .Rmd for the page and suggest changes. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor Ava Hoffman Content Idea Contributor Kasper Hansen |Production|| |Content Publisher|Ira Gooding| |Technical|| |Template Publishing Engineers|Candace Savonen, Carrie Wright, Ava Hoffman| |Publishing Maintenance Engineer|Candace Savonen| |Technical Publishing Stylists|Carrie Wright, Candace Savonen| |Package Developers (ottrpal)|John Muschelli, Candace Savonen, Carrie Wright| |Funding|| |Funder| National Human Genome Research Institute (NHGRI) | |Funding Staff| Fallon Bachman, Jennifer Vessio, Emily Voeglein|   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.3 (2022-03-10) ## os Ubuntu 20.04.5 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2025-02-03 ## pandoc 2.17.1.1 @ /usr/local/bin/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## bookdown 0.24 2023-03-22 [1] Github (rstudio/bookdown@88bc4ea) ## bslib 0.3.1 2021-10-06 [1] RSPM (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] RSPM (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] RSPM (R 4.1.0) ## cli 3.2.0 2022-02-14 [1] RSPM (R 4.1.0) ## crayon 1.5.1 2022-03-26 [1] RSPM (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] RSPM (R 4.1.0) ## devtools 2.4.3 2021-11-30 [1] RSPM (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] RSPM (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] RSPM (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] RSPM (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] RSPM (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] RSPM (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] RSPM (R 4.1.0) ## htmltools 0.5.2 2021-08-25 [1] RSPM (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] RSPM (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] RSPM (R 4.1.0) ## knitr 1.33 2023-03-22 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.1 2021-09-24 [1] RSPM (R 4.1.0) ## magrittr 2.0.3 2022-03-30 [1] RSPM (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] RSPM (R 4.1.0) ## pkgbuild 1.3.1 2021-12-20 [1] RSPM (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] RSPM (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.1.0) ## processx 3.5.3 2022-03-25 [1] RSPM (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] RSPM (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] RSPM (R 4.1.0) ## remotes 2.4.2 2021-11-30 [1] RSPM (R 4.1.0) ## rlang 1.0.2 2023-03-22 [1] Github (r-lib/rlang@34b04a8) ## rmarkdown 2.10 2023-03-22 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.1.3) ## sass 0.4.1 2022-03-23 [1] RSPM (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] RSPM (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] RSPM (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.1.0) ## testthat 3.0.1 2023-03-22 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.6.9000 2023-03-22 [1] Github (r-lib/usethis@b4b8623) ## withr 2.5.0 2022-03-03 [1] RSPM (R 4.1.0) ## xfun 0.26 2023-03-22 [1] Github (yihui/xfun@74c2a66) ## yaml 2.3.5 2022-02-21 [1] RSPM (R 4.1.0) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library ## ## ────────────────────────────────────────────────────────────────────────────── "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
